#!/bin/bash

set -e

indent() {
  sed -u 's/^/       /'
}

export_env_dir() {
  env_dir=$1
  whitelist_regex=${2:-''}
  blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

export_env_dir "$ENV_DIR"

echo "-----> Install ImageMagick"

# General build pack environment variables
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
VENDOR_DIR="$BUILD_DIR/vendor"
INSTALL_DIR="$VENDOR_DIR/imagemagick"

# User config environment variables
CACHE_FILE="$CACHE_DIR/imagemagick.tar.gz"

if [ ! -f $CACHE_FILE ]; then

  # ghostscript
  echo "-----> Cloning ghostscript repo at the desired tag (${GHOSTSCRIPT_VERSION:-ghostscript-9.26})"
  git clone -b "${GHOSTSCRIPT_VERSION:-ghostscript-9.26}" --single-branch --depth 1 git://git.ghostscript.com/ghostpdl.git | indent
  cd ghostpdl

  echo "-----> Building ghostscript"
  ./autogen.sh | indent
  ./configure --prefix=$INSTALL_DIR | indent
  make | indent
  make install | indent
  cd ..

  # libde265
  echo "-----> Cloning libde265 repo"
  git clone https://github.com/strukturag/libde265.git | indent
  cd libde265

  echo "-----> Reset libde265 to desired tag/commit (${LIBDE265_VERSION:-v1.0.3})"
  git reset --hard "${LIBDE265_VERSION:-v1.0.3}" | indent

  echo "-----> Building libde265"
  ./autogen.sh | indent
  ./configure --prefix=$INSTALL_DIR | indent
  make | indent
  make install | indent
  cd ..

  # libheif
  echo "-----> Cloning libheif repo"
  git clone https://github.com/strukturag/libheif.git | indent
  cd libheif

  echo "-----> Reset libheif to desired tag/commit (${LIBHEIF_VERSION:-v1.3.2})"
  git reset --hard "${LIBHEIF_VERSION:-v1.3.2}" | indent

  echo "-----> Building libheif"
  ./autogen.sh | indent
  ./configure --prefix=$INSTALL_DIR
  make | indent
  make install | indent
  cd ..

  # ImageMagick
  echo "-----> Cloning ImageMagick repo"
  git clone https://github.com/ImageMagick/ImageMagick.git | indent
  cd ImageMagick

  echo "-----> Reset to desired tag/commit (${IMAGEMAGICK_VERSION:-7.0.8-27)}"
  git reset --hard "${IMAGEMAGICK_VERSION:-7.0.8-27}" | indent

  echo "-----> Set environment"
  export PKG_CONFIG_PATH="$INSTALL_DIR/lib/pkgconfig"
  export LDFLAGS="-L$INSTALL_DIR/lib"
  export CPPFLAGS="-I$INSTALL_DIR/include/libheif"

  echo "-----> Building ImageMagick"
  ./configure --enable-shared=no --enable-static=yes --with-zero-configuration --prefix=$INSTALL_DIR | indent
  make | indent
  make install | indent
  cd ..

  # copy needed libraries
  echo "-----> Copying needed libraries"
  #cp /usr/lib/libgvc.so.6 $INSTALL_DIR/lib/libgvc.so.6
  #cp /usr/lib/libcgraph.so.6 $INSTALL_DIR/lib/libcgraph.so.6

  cp /usr/lib/x86_64-linux-gnu/libxcb.so.1 $INSTALL_DIR/lib/libxcb.so.1
  #cp /usr/lib/libpathplan.so.4 $INSTALL_DIR/lib/libpathplan.so.4
  #cp /usr/lib/libcdt.so.5 $INSTALL_DIR/lib/libcdt.so.5

  # cache for future deploys
  echo "-----> Caching ImageMagick installation"
  mkdir -p $CACHE_DIR
  cd $VENDOR_DIR
  REL_INSTALL_DIR="imagemagick"
  tar czf $REL_INSTALL_DIR.tar.gz $REL_INSTALL_DIR
  mv $REL_INSTALL_DIR.tar.gz $CACHE_FILE

else
  # cache exists, extract it
  echo "-----> Extracting ImageMagick $CACHE_FILE => $VENDOR_DIR"
  tar xzf $CACHE_FILE -C $VENDOR_DIR
fi

echo "-----> Writing policy file"
mkdir -p $INSTALL_DIR/etc/ImageMagick
cat > $INSTALL_DIR/policy.xml <<EOF
<policymap>
  <policy domain="coder" rights="none" pattern="EPHEMERAL" />
  <policy domain="coder" rights="none" pattern="HTTPS" />
  <policy domain="coder" rights="none" pattern="MVG" />
  <policy domain="coder" rights="none" pattern="MSL" />
</policymap>
EOF

# update PATH and LD_LIBRARY_PATH
echo "-----> Updating environment variables"
PROFILE_PATH="$BUILD_DIR/.profile.d/imagemagick.sh"
ACTUAL_INSTALL_PATH="$HOME/vendor/imagemagick"
mkdir -p $(dirname $PROFILE_PATH)
echo "export PATH=$ACTUAL_INSTALL_PATH/bin:\$PATH" >> $PROFILE_PATH
echo "export LD_LIBRARY_PATH=$ACTUAL_INSTALL_PATH/lib:\$LD_LIBRARY_PATH" >> $PROFILE_PATH
echo "export MAGICK_CONFIGURE_PATH=$ACTUAL_INSTALL_PATH" >> $PROFILE_PATH
